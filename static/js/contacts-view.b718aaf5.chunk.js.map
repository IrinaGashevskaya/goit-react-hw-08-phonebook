{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","fetchContacts","dispatch","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","response","status","toast","info","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getLoading","isLoading","getError","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactList","useDispatch","visibleContacts","useSelector","contactsSelectors","className","map","id","type","onClick","contactsOperations","ContactForm","useState","setName","setNumber","onSubmit","e","preventDefault","find","isAdded","alert","pattern","title","required","onChange","target","Loader","Filter","htmlFor","contactsActions","filterContact","ContactsView","useEffect"],"mappings":"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","file":"static/js/contacts-view.b718aaf5.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from \"axios\";\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contacts-actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch((error) => {\r\n      dispatch(fetchContactsError(error));\r\n\r\n      if (error.response.status === 404) {\r\n        toast.info(\"There is no such user's collection!\");\r\n      } else if (error.response.status === 500) {\r\n        toast.error(\"Oops! Server error! Please try later!\");\r\n      } else {\r\n        toast.error(\"Something went wrong! Please reload the page!\");\r\n      }\r\n    });\r\n};\r\n\r\nexport const addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => {\r\n      dispatch(addContactError(error));\r\n\r\n      if (error.response.status === 400) {\r\n        toast.error(\"Contact creation error!\");\r\n      } else {\r\n        toast.error(\"Something went wrong! Please reload the page!\");\r\n      }\r\n    });\r\n};\r\n\r\nexport const deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => {\r\n      dispatch(deleteContactError(error));\r\n\r\n      if (error.response.status === 404) {\r\n        toast.info(\"There is no such user's collection!\");\r\n      } else if (error.response.status === 500) {\r\n        toast.error(\"Oops! Server error! Please try later!\");\r\n      } else {\r\n        toast.error(\"Something went wrong! Please reload the page!\");\r\n      }\r\n    });\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getLoading = (state) => state.contacts.isLoading;\r\nexport const getError = (state) => state.contacts.error;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\n//import { IconButton } from \"@material-ui/core\";\r\n\r\nimport \"./ContactList.css\";\r\n\r\nfunction ContactList() {\r\n  const dispatch = useDispatch();\r\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 0 && (\r\n        <ul className=\"list\">\r\n          {visibleContacts.map(({ id, name, number }) => (\r\n            <li className=\"item\" key={id}>\r\n              <p className=\"name\">\r\n                {name}: {number}\r\n              </p>\r\n              <button\r\n                className=\"button\"\r\n                type=\"button\"\r\n                name=\"delete\"\r\n                onClick={() => dispatch(contactsOperations.deleteContact(id))}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {!contacts.length && (\r\n        <p className=\"contact-empty\">\r\n          Your phonebook is empty. Please add contact.\r\n        </p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport \"./ContactForm.css\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport LoaderApp from \"../Loader/Loader\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const isLoading = useSelector(contactsSelectors.getLoading);\r\n  const dispatch = useDispatch();\r\n  const isAdded = (name) => {\r\n    return contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isAdded(name)) {\r\n      return alert(`${name} is already in contacts`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n    }\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <label className=\"label-form\">\r\n        Name\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </label>\r\n      <label className=\"label-form\">\r\n        Number\r\n        <input\r\n          className=\"input\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={(e) => setNumber(e.target.value)}\r\n        />\r\n      </label>\r\n      <button className=\"button-form\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n      {isLoading && <LoaderApp />}\r\n    </form>\r\n  );\r\n};\r\nexport default ContactForm;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { contactsActions, contactsSelectors } from \"../../redux/contacts\";\r\nimport \"./Filter.css\";\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(contactsSelectors.getFilter);\r\n\r\n  return (\r\n    <label className=\"label\" name=\"filter\" htmlFor=\"filter\" value={filter}>\r\n      Find contacts by name\r\n      <input\r\n        className=\"input-filter\"\r\n        value={filter}\r\n        type=\"text\"\r\n        id=\"filter\"\r\n        onChange={(e) =>\r\n          dispatch(contactsActions.filterContact(e.target.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport ContactList from \"../../components/ContactList\";\r\nimport ContactForm from \"../../components/ContactForm\";\r\nimport Filter from \"../../components/Filter\";\r\nimport { contactsOperations } from \"../../redux/contacts\";\r\nimport \"./ContactsView.css\";\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <div className=\"phonebook\">\r\n      <h1 className=\"header\">Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className=\"title\">Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}